#include <iostream>
#include <vector>
#include <conio.h>
#include <windows.h>
using namespace std;

void clear()
{
    system("cls");
}

class unit {
protected:
    int x, y;
    std::string name;
public:
    unit(std::string name, int x,int y){
        this->name = name;
        this->x = x;
        this->y = y;
    }
};
class sec :unit {
public:
    void Print_Text()
    {
        clear();

        std::cout << R"(
.......................-+=-:................................
......................=%###%%@%=............................
.....................:==*#%%@@@@@-..........................
..................:::##%%@@@@@@@@@..........................
...............:%@@@%-=====*%%@@@@=.........................
................:+*#*+=====+*++=+#-.........................
...................-======+****=-+-.........................
.................:+.:++++++****=**+.........................
..............:-*#@..=+++++*####**+.........................
............:-=--#%...===+*####***#-........................
............+++#%%-....*#%%%#***++*%%-......................
............-+==*:.....-%@##***+++#%@#@@@#:.................
............:-:=:...:%@#%%++*++==#@@@@@@%####*:.............
........*-:-=-...:=*#%%%@%%%#++#@@@@@@@@%#%%%@@*............
.......*%##@*..=#%%%%%@%%%%%%%@%%%%@%%---@%%@@@%*...........
......+%#%@%::#%%%###%%%%%%%%@%%%%%%@%=+=#@%@@@%#=..........
....-%@##%@@@@@@%%###%%%%%%%%%%%##%%%%%%@@@@@@@%*+-.........
...:%%##%@@@@@@@%%####%%##%%%%%##%%%%%%%@@@@@@%@@*+-........
..:####%%@%%@@@@%%%#%%%#%%@%%%%%%%%@%%%@@@@%@@@@@@%#........
..-####%#:@%+@=-%*##=#%%#+#*%-%-%@=@=%:+*+=@@@@%%@@@%.......
..+###%%@:%#+%+*##+%:%.%++#*%-%-%@=%:#*+*+*-@@@%%%@@%*......
..####%%@@@@@@@@=*#########%%%%#%#@%#%@%@@@-*@@@%%%@@@*.....
.=####%%%@@@#:...=###########%##%#%%%#%@@@#..=@@%%@@@@%=....
..*%%%@@#-.......:##%%%%%%###%##%%#@%%%@@@*..:%@%%@@@@@@=...
.................:%@%########%####%%@@%@@@*....=@%%@%%%@*...
.................:#%%########%####%%@@@@@@-.....:%%%%%@@#:..
................:-.=%%%######%###%%%%%@@@@#+:....*%#%#%@@-..
...............#%%@#@%#########%%%@@%@@@@@@@%....:%%%%%%@=..
..............-@%%@@%%%%%%%%%%%%@@@@@@@@@#%@*.....:#%#%@@-..
..............-@##@%#%%####%=-=##@@@@@@@@%#@-......-##%%%-..
..............*#*%@%%#+***#%*++%#@@@@@@@@@#%:......-+:=%@:..
)";
        std::cout << "/t/t/tОхрана вы записаны  проходите ";
        getchar();
        
    }
};
class Vadim :unit {
public:
    void FirstMessage() {
        bool flag = true;
        do {
            try {
                clear();
                std::cout << "/t/t/t/t/tVadim:/n";
                std::cout << R"(
@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@
@@%%%@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@
%%%@@%%%@@@@@@@@@@@%%%%%%%%%%%%%%%%%%@%@%%%@@@%#***%@@@@@@@@
%%#%%%%%%%%%%+=+%@%%%%*#%*+=*+-#*#*=*%%%%%%@%**++*##@@@@@@@@
%%#%%%#%%%@%#==+++%%%%++++*++=+#+#+-+**%%%%#*+++++*#@@@@@@@@
###%%%#%%%#%*====*%%%%##%**%**%%#%**%##%%@@%++===+*#@@@@@@@@
+**#%%##%%#%*=====-%%%%#****##%%#*%##%%%%@%%+===++*#%@@@@@@@
++*+*###%%#%#+==+##%%%%%%%%%%%%%%%%%%%%%%@%++==+++*%%%@@@@@@
#++=++*#%%#%#+===%%%%%%%%%%%%%%%%%%%%%%%%%%%*++==+*%%%%%%%%@
%%%**##+*##%%#==*%%%#*+==++==+%@@@@@%%%%%%%%#==++*#%%%#%%#%%
##%%#%%%%@@@%#+++*##########%%%%##%%%%%%%%%%%*++*#%%%%%%%%%%
##########%%%#==#@@@@%+-:-==--======-:-=*@@@@*=+*#%%%%%%%%%%
###+#########+==##@%%#@%=:-========::=%%#+%@%%*++%@%@@@@@@@@
###**###*###+-::**#@@@*#%:--===+=-=:-@+#@@@@+#::-*%%@@%@@%@@
###*####*##**+===-::::-+#+==-----==+##*====----=+*#%@%%@@%@@
###**#####*==+++++=+==++=++==----==****+-====++**+#%%%%%@%@@
#########*==****+=====--=+#**++++***==-====++**+===*%%%%@@@@
%%%%%####++=+++*+=+++=--:=#@%*++#%#+----==+=+#*****#@@@@@@@@
%%%%%%%%%*=+=-==+=--=--::..:##%##-...:----=*+==-=+*#@@@@@@@@
%%%%%%##%#=-----=====--:::::-*%+-::::::----+===++=+%@@@@@@@@
%%%###%#+*+=-:::--====------=+*+=-:-----==--------*%%%%@%@@@
%%%%####*+-=====--==++++====-----====++=--::-----+**+++***#*
##***++++--===---==++++++++===========----=======++**#####%%
**++****+=--====-------=====++*+=+------------==+*#*****####
********+=-==++=--------:-:--::=--:::--------=++**+*###**#%%
******+=+++=---===-----::::+-::-=::--------==+***++*########
***+==-==+*+=---===+===--=+=--:-=------=+++****+==+*#%#%####
++==-:-+*+*##**+==++++*++====--====++******+=====+*##%%#####
=*+===+##***##%###**+++++++==+=++=+=+++++=====++*##*+#%%%%%%
=+++***%%###***#%%%#######+++++++*+++=++++++++******#%%%%###
+++****#######******###*##**++++*#%####*#####***+**#@@%%####
*******##%%#%%####******++*+++=+++*#######**++++*##%@@@%%%%%)";
                std::cout << "/t/t/t/t Дароу в клуб хочешь?(1 - да 2- нет) ";
                std::string key;
                std::cin >> key;
                if (key == "1") {
                    // тут должен быть телепорт в клуб а где лучшие тусовки ? у нас в клубе  или чо ты там придумаешь ренатик
                }
                if (key == "2") {
                    clear();
                }
                if (key != "1", key != "2") {
                    throw key;
                    flag = false;
                }
            }
            catch (std::string key) {
                std::cout << "Eroro Not found this example " << key;
                getchar();
            }

        } while (flag = true);
    }
};
class MaxVerstappen {
public:
    void FirstMessage() {
        clear();
        cout << "\t\t\t\t\tMax Verstappen:\n"; // Исправлен синтаксис отступа
        cout << R"(
#######********++++++==============++++++******************#
#####******++++++=====--===---==--=====++++++++*******++****
######**++++++++===-===-------------=====++++++*************
#####***+++++===-==--------------------======++++*****+*****
##*****++++++==-----------------------------===++++++*******
##***++===+====-------------------------------===++++***+***
*****++===-====----------------------------------=+++***++**
***++========-------------+++++=--------------======+++++++*
***++=====-------------+%%%%%#**%*=-------------====+++++=+*
#**+++++===----------+%@@%%%%####%%#=-----------=====+++++++
#**+++====----:-----*%@@%%%###*+++*##------------=====++****
****++=====---:-----%%@#*==--:::::-*+=----------======+++***
****+++=--=---:-----%%%#+=-:::::::=#*=---------=======++****
**+++++==-==-------=%%*#**#*--++==-=#+--------====++++++*+**
**++++++=====------=%***+=+#=:-=---:=----------=====+++*+++*
**++++++=+===------+%**+-=*#=--:::::-=------========++++=++*
***++++++=+===------*##*++*#*=-::::-:------=========++++=++*
#*++++++=++======-----*##***+==-:::----------======+++++++**
***+++++====+++=====--+###**+=---:-===============+++++*****
****+++===+*++========*%%%#+=---==-*#*++++======++++=+******
****+++=+++*++=++==+++*%%%%%%*+=-:-****#**++++++++++++******
***++++=-=*+++==---=++=*%%#*=--::::=*********+++++++********
****+++++==+++-----=++++=*##=-----=*************+++*********
#***+++++==++=-------=+++++++=++******+*******#**********#**
##**+++++==++=---------===++*++**+++===+********###******###
##*****+==+*+-=-==-------------------==***+******###****####
##****=-==+*=+====-----------==------==+*++******#%%#*######
#****=--=++++=====---------==++==-----==+=+**+**######*#####
###+=----+*+=+=++==--------==++==-----==+++*+++*#%##%#######
#*+=-=---=+====+=+=-------:-====-:::-===+++**++*#####%######
*+==------+====+++=-------=*+*****=--==+*++**+*#####%#%#####
++==-=---===++==++==-----=*#######+====+*=***+########%%####
++=====--=-=++==++==------=+****+=--=+*+===+**#########%%###
*+=+====---=++=-+++=-===---:-+*====+++=======+*########%%%##
*+++=+=-=--=*+=-=*+======-----:---+++==+===+===+*######%%%%#
**+++=======+*=--*+=======--------==+**=======+++=*#%%%%%%%%
**+++=++====+*+==++================++******##***+==*#####%%%
**++++++++++=+=--+++================+*+**####***+=++#####%%%
#******+*++++*=--*+++====+====+++=+++*+***##*+**==++*####%%%
####**+++++*******++=+++++=++++++++++*+**###*++*=++++*####%%
######*####%%%######***********#*+**+***####*=++=++=+*#####%
###########%%###*+=+=+=+++++++*+****+*######*=++=+++++#####%
############%##*+=+=+==-=+=++++*****+*#######==+=++*++####%%
###############*+=+++===+=+=+***++**+*########=*=+++***##%%%
#############%*+=++=+===+++=+**++***+*########+++=++++**##%%%)";
        cout << "\t\t\t\tТы прибыл на Венеру\n"; // Исправлен синтаксис
        _getch(); 
        cout << "\t\t\t\tПрекрасное место для отдыха и не более\n";
        cout << "\t\t\t\tБольше тебя задерживать не буду.\n";
        clear();
    }
};


class Petya : unit {
public:
    void Dialog() {
        bool flag= false;
        std::cout << R"(
==-===-=-:===-===--=-------:--:::::--.::::---:::::::::::::::
=======-=-:===-=====-------::--..::-:-:::--::--::--:-:::-::.
=====++=-=--======---------:::::.:---------::--:::::--::::::
+=++=======:-======-===-----::-:..:--------=--=::::::-::::::
+++++=++=-=--======--==-----::--:.::::---::-::-:::::::::--::
+++=++=++===--==========-=---::--:.:::--:--:--::::::::::::::
+++++++++===--========+#%%%%#*---:.:::---------------:::::::
++++++++++===--======#%%######%#=-:.:--::::---=++**=--=:::::
=++++++++++===:-====*+=++====*##*-:.::::::-------::...:-::::
-++++++++++==+--===#*+=------+*#*--:::::::-:--..........-:::
+=++++++++++======*#*++=====-==+=--..::.::::--..........::::
+-:::::::::.:---=*%%*=+--=-------:-:..:.:::::-...........::-
.:::........:--==+#%%%+===--==-+-:--:::::::::-...........:::
::::--..:::::-=++++*##*+========-:--:.:::::::-............::
::.::::---::::::::::-=**+=====+=:..:..:-:::::-............-:
:::::......:::::...:::=+++=====::.:......::-:-:...........::
+-...:...:....:......:.-====-:.............-::-...........::
%++:::::::::...:.........:..................::-:..........:-
#+=--+##+::-::..::....:...........:..........:--.......:.::-
#+=--=**##%=:::..::............:-+=....:......:-..........:-
#*=---*#**#=::::..::...........-++=-:.::.......:--::::::::--
#+=--=***##=:::-:...:.........:======-==:.......::::::::::-:
#+---=*#*##*::::-:...:.........==---==:..........::::::::::-
#*=--+******::::--:.:.:::......-=-=++++-.......:::----:--::-
#*=--+*#**#-::::::--:...:.......-++++*+-:.....::::.:::::::--
##+--+***#+:::::::::::...:........:::--+-:....-::::-:::::::-
##+--+**#*=:::::::::..::.....:::.:::--==---:-===-+-::::-::::
###--=****-::-:::::::...::........::::--#%%%%%%%%%%%%%###*++
###*--*****::=+==::::....:::..::::::-*##++++#%##%%%%########
####+-****####*==--:::......:::::=#%%%%%#====###%%%%########
####*****###%%%%%%%%%##%%##%%@%%%%%%%%%%%%#**##%%%%%#%%#%%%#
####*=#***##%@@%@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#####=***####@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#)";
        while (!flag) {
            std::cout << "/nPetya: куда летим воин?: 1 2 3";
            int key;
            switch (key) {
            case 1:
                std::cout << "Телепортация прошла успешна";
                flag = true;
            case 3:
                std::cout << "Телепортация прошла успешна";
                flag = true;
            case 2:
                std::cout << "Телепортация прошла успешна";
                flag = true;
            }
        }
        clear();
    }

};
class Mer { // Класс Mer
public:
    void Dialog_s_merom() {
        std::cout << R"(```
     .--.
    |o_o |
    |:_/ |
   //   \ \
  (|     | )
 /'\_   _/`\
 \___)=(___/
```)";
        std::cout << "\nМер: Я мер.....\n"; // Исправлен синтаксис новой строки
        std::cout << "ВЫ: ....\n";
        clear(); // Вызов метода очистки
        std::cout << "Увидев в каком состоянии мер, вы ушли обратно.\n";
        clear(); // Очистить консоль снова
    }
};
class Chunks {
protected:
    int chX, chY;
    int oldChX, oldChY;
public:
    Chunks(int chX = 0, int chY = 0, int oldChX = 0, int oldChY = 0) : chX(chX), chY(chY), oldChX(oldChX), oldChY(oldChY) {}
};

class Player {
protected:
    int x, y;
public:
    Player(int x = 0, int y = 1) : x(x), y(y) {}
};

class NPC {
protected:
    pair<int, int> npc;
public:
    NPC() {
        npc = {};
    }

};

class Decorations {
protected:
    vector<pair<int, int>> korobochka;
    vector<pair<int, int>> decoC1;
    vector<pair<int, int>> decoC2;
    vector<pair<int, pair<int, int>>> decoratedChunks;
    vector<pair<int, int>> nullChunks;
    int seed;
public:
    Decorations() {
        nullChunks = { {0 ,0}, {0, 1}, {1, 0}, {1, 1} };
        decoC1 = {};
        decoC2 = {};
        korobochka = {};
        seed = 0;
    }
    // ne skip
    bool isDecoration(int x, int y, int choice) const {
        switch (choice) {
        case 1:
            for (auto i : decoC1) {
                if (i.first == y && i.second == x) {
                    return true;
                }
            }
            break;
        case 2:
            for (auto i : decoC2) {
                if (i.first == y && i.second == x) {
                    return true;
                }
            }
            break;
        case 3:
            for (auto i : korobochka) {
                if (i.first == y && i.second == x) {
                    return true;
                }
            }
            break;
        }
        return false;
    }
    void addRandomDeco(int x = 0, int y = 0, int choice = 1) {
        int rngY = rand() % 5;
        int rngX = rand() % 5;
        switch (choice) {
        case 1:
            decoC1.push_back({ rngX + x * 7, rngY + y * 5 });
            break;
        case 2:
            decoC2.push_back({ rngX + x * 7, rngY + y * 5 });
            break;
        case 3:
            korobochka.push_back({ rngX + x * 7, rngY + y * 5 });
            break;
        }
    }
    // skip
    void fillChunk() {
        for (int y = 0; y < 7; y++) {
            for (int x = 0; x < 5; x++) {
                addRandomDeco(x, y, 1);
                int chance = rand() % 10;
                if (chance <= 1) {
                    addRandomDeco(x, y, 2);
                }
            }
        }
    }
    // skip
    void addSeedToChs(int seed, int x, int y) {
        decoratedChunks.push_back({ seed, {x, y} });
    }
    // skip
    int getSeed(int x, int y) {
        for (auto i : decoratedChunks) {
            if (i.second.first == x && i.second.second == y) {
                return i.first;
            }
        }
        return 0;
    }
    // skip
    void print() {
        for (auto i : decoratedChunks) {
            cout << i.first << " " << i.second.first << " " << i.second.second << endl;
        }
    }
    void clearChunk() {
        decoC1 = {};
        decoC2 = {};
        korobochka = {};
    }
};

class Obstacles {
    vector<pair<int, int>> obstC;
    vector<pair<pair<int, int>, pair<int, int>>> largeObstC;
    vector<pair<int, int>> deleteObstC;
    vector<pair<pair<int, int>, pair<int, int>>> deleteLargeObstC;
public:
    Obstacles() {
        largeObstC = { {{4,3}, {12,15}} }; // коорды для больших препятствий
        deleteLargeObstC = { {} }; // удалять большие коорды препятствий
        //ТУТ МНЕ НАДО СДЕЛДЛАТЬ КОД ДЛЯ УДАЛЕНИЯ КООРДИНАТ ДАААААААААААААААААА
        obstC = { {5,35},{4,35},{3,35},{2,35},{1,35},{0,35},{5,36},{5,37},{5,38},{5,39},{5,40},{5,41},{5,42},{5,43},{5,44},{5,45},{5,46},{5,47},{5,48},{5,49},{5,50},
    {5,51},{5,52},{5,53},{5,54},{5,55},{5,56},{5,57},{5,58},{5,59},{5,60},{5,61},{5,62},{5,63},{5,64},{5,65},{5,66},{5,67},{5,68},{5,69},{4,69},{3,69},{2,69},{1,69},{0,69},
            //рестик                                                                   -
            {24,35},{24,36},{24,37},{24,38},{23,38},{22,38},{21,38},{20,38},{19,38},{18,39},{18,40},{18,41},{18,42},{18,43},{18,44},{18,45},{18,46},{18,47},{18,48},{18,49},{18,50},
            {18,54},{18,55},{18,56},{18,57},{18,58},{18,59},{18,60},{18,61},{18,62},{18,63},{18,64},{18,65},{19,66},{20,66},{21,66},{22,66},{23,66},{23,66},{24,66},{24,67},{24,68},{24,69},
            //стены рестика
        {25,35},{25,36},{25,37},{25,38},{25,39},{25,40},{25,41},{25,42},{25,43},{25,44},{25,45},{25,46},{25,47},{25,48},{25,49},{25,50},{25,54},{25,55},{25,56},{25,57},{25,58},{25,59},{25,60},{25,61},{25,62},{25,63},{25,64},{25,65},{25,66},{25,67},{25,68},{25,69},
            {26,35},{27,35},{28,35},{29,35},{30,35},{31,35},{32,35},{33,35},{34,35},{38,35},{39,35},{40,35},{41,35},{42,35},{43,35},{44,35},{45,35},{46,35},{47,35},{48,35},{49,35},{49,35},
            {49,36},{49,37},{49,38},{49,39},{49,40},{49,41},{49,42},{49,43},{49,44},{49,45},{49,46},{49,47},{49,48},{49,49},{49,50},{49,51},{49,52},{49,53},{49,54},{49,55},{49,56},{49,57},{49,58},{49,59},{49,60},{49,61},{49,62},{49,63},{49,64},{49,65},{49,66},{49,67},{49,68},{49,69},
            {26,69},{27,69},{28,69},{29,69},{30,69},{31,69},{32,69},{33,69},{34,69},{35,69},{36,69},{37,69},{38,69},{39,69},{40,69},{41,69},{42,69},{43,69},{44,69},{45,69},{46,69},{47,69},{48,69},{49,69},{49,69},
            {26,63},{27,63},{28,63},{29,63},{30,63},{31,63},{32,63},{33,63},{34,63},{35,63},{36,63},{37,63},{38,63},{39,63},{40,63},{41,63},{42,63},{43,63},{44,63},{45,63},{46,63},{47,63},{48,63},{49,63},
            { 28,38 },{28,39},{28,40},{28,41},{28,42},{29,38},{29,39},{29,40},{29,41},{29,42},{30,38},{30,39},{30,40},{30,41},{30,42},{31,38},{31,39},{31,40},{31,41},{31,42},
            {28,54},{28,55},{28,56},{28,57},{28,58},{29,54},{29,55},{29,56},{29,57},{29,58},{30,54},{30,55},{30,56},{30,57},{30,58},{31,54},{31,55},{31,56},{31,57},{31,58},
            {46,54},{46,55},{46,56},{46,57},{46,58},{45,54},{45,55},{45,56},{45,57},{45,58},{44,54},{44,55},{44,56},{44,57},{44,58},{43,54},{43,55},{43,56},{43,57},{43,58},
            {46,38},{46,39},{46,40},{46,41},{46,42},{45,38},{45,39},{45,40},{45,41},{45,42},{44,38},{44,39},{44,40},{44,41},{44,42},{43,38},{43,39},{43,40},{43,41},{43,42},
            
            { },
        }; // коорды для точечных препятствий
        deleteObstC = {}; // удалять точечно препятсвтия
    }
    bool isObstacle(int x, int y) const {
        for (auto i : obstC) {
            if (i.first == x && i.second == y) {
                return true;
            }
        }
        return false;
    }
    void printObst() {
        for (auto i : obstC) {
            cout << i.first << ", " << i.second << "\n";
        }
    }
};
class Map : public Player, public Chunks, public Obstacles, public Decorations {
    vector<Chunks> chunks;
public:
    void movePlayer(int dx, int dy) {
        int newX = x + dx;
        int newY = y + dy;
        oldChX = chX;
        oldChY = chY;
        if (isObstacle(newX, newY) == false) {

            x = newX;
            y = newY;
            if (x < 0) {
                chX = x / 35 - 1;
            }
            else {
                chX = x / 35;
            }
            if (y < 0) {
                chY = y / 25 - 1;
            }
            else {
                chY = y / 25;
            }
        }
    }
    void tick() {
        if (oldChY != chY || oldChX != chX) {
            clearChunk();
            bool check = false;
            for (auto i : nullChunks) {
                if (chX == i.first && chY == i.second) {
                    check = true;
                }
            }
            if (!check) {
                seed = getSeed(chX, chY);
                if (seed == 0) {
                    seed = rand();
                    addSeedToChs(seed, chX, chY);
                }
                srand(seed);
                fillChunk();
            }
        }
    }

    void initMap() {
        while (true) {
            tick();
            if (getSeed(chX, chY) != 0) {
                seed = getSeed(chX, chY);
            }
            srand(seed);
            printMap();
            cout << seed << "\n";
            cout << x << ", " << y;
            char input = _getch();
            switch (input) {
            case 'd':
                movePlayer(1, 0);
                break;
            case 's':
                movePlayer(0, 1);
                break;
            case 'a':
                movePlayer(-1, 0);
                break;
            case 'w':
                movePlayer(0, -1);
                break;
            }
        }
    }
    void printMap() {
        clear();
        for (int y = chY * 25; y < 25 + (chY * 25); ++y) {
            for (int x = chX * 35; x < 35 + (chX * 35); ++x) {
                // человечек
                if (x == this->x && y == this->y) {
                    cout << "[]";
                }
                else if (x == this->x && y - 1 == this->y) {
                    cout << "TT";
                }
                else if (x == this->x && y + 1 == this->y) {
                    cout << "()";
                }
                // Препятствие
                else if (isObstacle(x, y)) {
                    cout << "##";
                }
                // korobochka
                else if (isDecoration(x - chX * 35, y - chY * 25, 3)) { cout << "88"; }
                else if (isDecoration(x - 1 - chX * 35, y - chY * 25, 3)) { cout << "88"; }
                else if (isDecoration(x - chX * 35, y - 1 - chY * 25, 3)) { cout << "88"; }
                else if (isDecoration(x - 1 - chX * 35, y - 1 - chY * 25, 3)) { cout << "88"; }
                // Дерево
                else if (isDecoration(x - chX * 35, y - chY * 25, 2)) { cout << "/#"; }
                else if (isDecoration(x - 1 - chX * 35, y - chY * 25, 2)) { cout << "&#"; }
                else if (isDecoration(x - 2 - chX * 35, y - chY * 25, 2)) { cout << "#\\"; }
                else if (isDecoration(x - chX * 35, y - 1 - chY * 25, 2)) { cout << "#&"; }
                else if (isDecoration(x - 1 - chX * 35, y - 1 - chY * 25, 2)) { cout << "##"; }
                else if (isDecoration(x - 2 - chX * 35, y - 1 - chY * 25, 2)) { cout << "&#"; }
                else if (isDecoration(x - chX * 35, y - 2 - chY * 25, 2)) { cout << "\\#"; }
                else if (isDecoration(x - 1 - chX * 35, y - 2 - chY * 25, 2)) { cout << "#&"; }
                else if (isDecoration(x - 2 - chX * 35, y - 2 - chY * 25, 2)) { cout << "#/"; }
                else if (isDecoration(x - 1 - chX * 35, y - 3 - chY * 25, 2)) { cout << "||"; }
                else if (isDecoration(x - 1 - chX * 35, y - 4 - chY * 25, 2)) { cout << "||"; }
                // venom
                else if ((x > 5 && x < 10) && (y > 5 && y < 10)) { cout << "  "; }
                else if ((x >= 5 && x <= 10) && (y >= 5 && y <= 10)) { cout << "[]"; }
                // Трава
                else if (isDecoration(x - chX * 35, y - chY * 25, 1)) { cout << ".,"; }
                else if (isDecoration(x - 1 - chX * 35, y - chY * 25, 1)) { cout << "\"\""; }
                else if (isDecoration(x - 2 - chX * 35, y - chY * 25, 1)) { cout << ",."; }
                // 232223123123
                //
                // Пустое 
                else {
                    cout << "  ";
                }
               
            }
            cout << endl;
        }
    }
};

/*int main()
{
    Map map;
    map.initMap();
}*/